
scalar Tempo

scalar Date

type Query {

  categoriaPorId(id: Int): Categoria
  
  todasAsQualificacoes: [Qualificacao]

  todasAsCategorias: [Categoria]
  
  candidatoPorId(id: Int): Candidato
  
  todosOsCandidatos: [Candidato]
   
  todasAsEmpresas: [Empresa]
  
  vagasPorCandidato: [VagasPorCandidato]

  qualificacaoPorId(id: Int): Qualificacao
}

type Mutation {

	selecionarCandidatos(id: Int): Vaga
	
	iniciarEntrevistas(id: Int): Vaga
	
	iniciar(id: Int): Vaga
	
	finalizarVaga(id: Int): Vaga
	
	cancelarVaga(id: Int): Vaga
}

type Categoria {
  id: Int
  descricao: String
}

type VagasPorCandidato {
  id: Int
  quantidade: Int
}

type Candidato {
	id: Int
	nome: String
	sobrenome: String
	titulo: String
	email: String
	dataContato: Date
	dataComeco: Date
	avatar: String
	experiencias: [Experiencia]
}

type Qualificacao {
	descricao: String
	versao: String
	id: Int
	tipo: Categoria
	equivalencias: [Equivalencia]
}

type Equivalencia {
    valor: Int
    destino: Qualificacao
}

type Experiencia {
	tempo: Tempo
	qualificacao: Qualificacao 
}

type Vaga {
	id: Int
	titulo: String
	empresa: Empresa
	descricao: String
	status: String
	contatoTelefone: String
	contatoEmail: String
	periodo: Periodo
	tags: [String]
}

type Periodo {
	dataInicial: Date
	dataFinal: Date
}

type Empresa {
	id: Int
	nome: String
}